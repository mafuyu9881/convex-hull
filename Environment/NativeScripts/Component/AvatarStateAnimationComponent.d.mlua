---@description "Specifies an animation to be played according to the Avatar's state changes."
@Component
script AvatarStateAnimationComponent extends Component

	---@description "The table the animation's name and AnimationClip are mapped to. Used when IsLegacy's value is true."
	---@sealed
	@Sync
	property SyncDictionary<string, string> ActionSheet

	---@description "Sets whether or not to support the legacy system. The previous system is no longer supported and will be deleted at a later date."
	---@sealed
	property boolean IsLegacy = false

	---@description "This is a table in which state names and AvatarBodyActionState are mapped. Used when IsLegacy's value is false."
	---@sealed
	@Sync
	property SyncDictionary<string, AvatarBodyActionElement> StateToAvatarBodyActionSheet

	---@description "Function which handles StateChangeEvent upon receiving. AnimationClipEvent is raised to play AnimationClip which is basically mapped to a State."
	method void ReceiveStateChangeEvent(IEventSender sender, StateChangeEvent stateEvent) end

	---@description "Function which handles StateChangeEvent upon receiving. AnimationClipEvent is raised to play AnimationClip which is basically mapped to a State."
	method void ReceiveStateChangeEvent(IEventSender sender, StateChangeEvent stateEvent) end

	---@description "Removes the element corresponding to key in StateToAvatarBodyActionSheet. Removes the element from ActionSheet if IsLegacy's value is true."
	---@sealed
	method void RemoveActionSheet(string key) end

	---@description "Adds elements to StateToAvatarBodyActionSheet. AvatarBodyActionStateName's property value of the AvatarBodyActionElement entity added as an element is animationClipRuid, and PlayerRate's property value is 1. Adds an element to ActionSheet when when IsLegacy's value is true."
	---@sealed
	method void SetActionSheet(string key, string animationClipRuid) end

	---@description "Returns the name of mapped Animation to the State."
	method string StateStringToAnimationKey(string stateName) end

	emitter EmitBodyActionStateChangeEvent(BodyActionStateChangeEvent event) end

end