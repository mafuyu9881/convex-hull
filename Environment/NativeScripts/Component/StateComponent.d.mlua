---@description "Provides a function to set the status behaviors and transition rules and control them using a custom StateType."
@Component
script StateComponent extends Component

	---@description "You can get the name of the current state."
	---@sealed
	@Sync
	readonly property string CurrentStateName = "IDLE"

	---@description "This function is now deprecated. Use another AddCondition (string, string, boolean) function."
	---@deprecated
	---@sealed
	method boolean AddCondition(string stateName, string nextStateName, func -> boolean conditionCheckFunction, boolean reverseResult = false) end

	---@description "Connects stateName's status and nextStateName's status. Returns false if it fails. When the return value of StateType's OnConditionCheck is true, the status transitions from stateName to nextStateName. If reverseResult's value is true, a status transition occurs when OnConditionCheck's return value is false."
	---@sealed
	method boolean AddCondition(string stateName, string nextStateName, boolean reverseResult = false) end

	---@description "This function is now deprecated. Use another AddState (string, Type) function."
	---@deprecated
	---@sealed
	method boolean AddState(string stateName, func updateFunction = nil) end

	---@description "Adds the status named stateName with a custom StateType. Returns false if it fails."
	---@sealed
	method boolean AddState(string stateName, Type stateType) end

	---@description "Forces the current state to be changed to the specified state."
	---@sealed
	method boolean ChangeState(string stateName) end

	---@description "Disconnects the state stateName from the state nextStateName."
	---@sealed
	method void RemoveCondition(string stateName, string nextStateName) end

	---@description "Removes the specified state."
	---@sealed
	method void RemoveState(string name) end

	emitter EmitDeadEvent(DeadEvent event) end

	emitter EmitReviveEvent(ReviveEvent event) end

	emitter EmitStateChangeEvent(StateChangeEvent event) end

end